import { createServerClient } from '@supabase/ssr'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  console.log('üîí Middleware executado para:', req.nextUrl.pathname)
  
  let response = NextResponse.next({
    request: {
      headers: req.headers,
    },
  })

  // Verificar se as vari√°veis de ambiente est√£o definidas
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!')
    console.error('üìù Crie um arquivo .env.local com as configura√ß√µes do Supabase')
    
    // Se n√£o √© rota de login, redirecionar
    if (!req.nextUrl.pathname.startsWith('/login') && !req.nextUrl.pathname.startsWith('/auth/callback')) {
      const redirectUrl = new URL('/login', req.url)
      redirectUrl.searchParams.set('redirect', req.nextUrl.pathname)
      return NextResponse.redirect(redirectUrl)
    }
    
    return response
  }

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return req.cookies.get(name)?.value
        },
        set(name: string, value: string, options: any) {
          req.cookies.set({
            name,
            value,
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: req.headers,
            },
          })
          response.cookies.set({
            name,
            value,
            ...options,
          })
        },
        remove(name: string, options: any) {
          req.cookies.set({
            name,
            value: '',
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: req.headers,
            },
          })
          response.cookies.set({
            name,
            value: '',
            ...options,
          })
        },
      },
    }
  )

  // Refresh session if expired - required for Server Components
  const { data: { session }, error } = await supabase.auth.getSession()
  
  console.log('üë§ Sess√£o encontrada:', !!session, 'Email:', session?.user?.email)
  if (error) {
    console.error('‚ùå Erro ao obter sess√£o:', error.message)
  }

  // Rotas p√∫blicas que n√£o precisam de autentica√ß√£o
  const publicRoutes = ['/login', '/auth/callback']
  const isPublicRoute = publicRoutes.some(route => 
    req.nextUrl.pathname.startsWith(route)
  )

  // Ignorar arquivos est√°ticos e API routes de webhook (que n√£o precisam de auth)
  const isStaticFile = req.nextUrl.pathname.startsWith('/_next') || 
                      req.nextUrl.pathname.startsWith('/api/webhook') ||
                      req.nextUrl.pathname.includes('.')
  
  if (isStaticFile) {
    console.log('üìÅ Arquivo est√°tico ignorado:', req.nextUrl.pathname)
    return response
  }

  console.log('üîç Rota p√∫blica?', isPublicRoute, 'Sess√£o?', !!session)

  // Se n√£o h√° sess√£o e n√£o √© rota p√∫blica, redirecionar para login
  if (!session && !isPublicRoute) {
    console.log('üö´ Redirecionando para login - sem sess√£o')
    const redirectUrl = new URL('/login', req.url)
    redirectUrl.searchParams.set('redirect', req.nextUrl.pathname)
    return NextResponse.redirect(redirectUrl)
  }

  // Se h√° sess√£o e est√° tentando acessar login, redirecionar para home
  if (session && req.nextUrl.pathname === '/login') {
    return NextResponse.redirect(new URL('/', req.url))
  }

  return response
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes - handled separately)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public files (images, etc.)
     */
    '/((?!api|_next/static|_next/image|favicon.ico|.*\\.(png|jpg|jpeg|gif|webp|svg|ico)$).*)',
  ],
}
